@page "/weather"
@using System.Globalization;
@using WeatherApp.Model
@using WeatherApp.Components
@using WeatherApp.Utilities
@using WeatherApp.Models;
@inject HttpClient Client

<h3>Eguraldia</h3>

<div class="input-group mb-3 mt-3">
    <input type="text" class="form-control" placeholder="Hiriaren izena" @bind=hiria />
    <div class="input-group-append">
        <button @onclick=GetWeather class="btn btn-outline-secondary" type="button">Bilatu</button>
    </div>
</div>


@if (@weatherDataList != null || @weatherDataList.Count()>0)
{

    for (int j = 0; j < hiriData.results.Count(); j++)
    {
        <div class="text-center">
            <p class="display-5">@hiriData.results[j].city</p>
            <p>@hiriData.results[j].city, @hiriData.results[j].county, @hiriData.results[j].country</p>
            <p class="display-1">@weatherDataList[j].current.temperature_2m ºC</p>
            <p class="display-6">@WeatherCode.Convert(weatherDataList[j].current.weathercode)</p>
        </div>

        <div class="card-group">
            @for (int i = 0; i < @weatherDataList[j].daily.time.Length; i++)
            {
                <WeatherApp.Components.WeatherCard Day="@weatherDataList[j].daily.time[i]"
                                                   MinWeatherData="@weatherDataList[j].daily.apparent_temperature_min[i]"
                                                   MaxWeatherData="@weatherDataList[j].daily.apparent_temperature_max[i]" />
            }
        </div>
    }
}


@code {
    string hiria = "";
    string probintzia = "";
    string herrialde = "";
    string lat = "";
    string lon = "";
    CityData hiriData;
    List<WeatherModel> weatherDataList = new List<WeatherModel>();
    async Task GetWeather()
    {
        hiriData = await GetCityData();

        for(int i = 0; i < hiriData.results.Count(); i++)
        {
            lat = (hiriData.results[i].lat).ToString();
            lon = (hiriData.results[i].lon).ToString();
            CultureInfo.DefaultThreadCurrentCulture = new CultureInfo("en-US");
            WeatherModel weatherData = await Client.GetFromJsonAsync<WeatherModel>(Endpoints.GetWeatherEndPoint(hiriData.results[i].lat, hiriData.results[i].lon));
            CultureInfo.DefaultThreadCurrentCulture = new CultureInfo("es-es");
            weatherDataList.Add(weatherData);            
        }
    }

    async Task<CityData> GetCityData()
    {
        var hiriData = await Client.GetFromJsonAsync<CityData>(Endpoints.GetGeoApofiEndpoint(hiria));
        return hiriData;
    }
}
